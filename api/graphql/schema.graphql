# Blaze Sports Intel GraphQL Schema

scalar DateTime
scalar JSON

# Sports Enum
enum Sport {
  FOOTBALL
  BASEBALL
  BASKETBALL
}

# League Types
enum FootballLeague {
  NFL
  NCAA_FBS
  NCAA_FCS
  TX_HS
}

enum BaseballLeague {
  MLB
  NCAA
  PERFECT_GAME
  TX_HS
}

enum BasketballLeague {
  NBA
  NCAA
  TX_HS
}

# Team Type
type Team {
  id: ID!
  sport: Sport!
  league: String!
  name: String!
  city: String!
  mascot: String
  abbreviation: String
  founded: Int
  stadium: String
  capacity: Int
  conference: String
  division: String
  colors: [String!]
  website: String
  logo: String
  socialMedia: SocialMedia
  currentRecord: Record
  roster: [Player!]
  schedule: [Game!]
  standings: StandingEntry
  stats: TeamStats
}

# Player Type
type Player {
  id: ID!
  sport: Sport!
  name: String!
  position: String!
  jersey: String
  team: Team
  height: String
  weight: Int
  birthDate: String
  hometown: String
  college: String
  highSchool: String
  draftInfo: DraftInfo
  stats: PlayerStats
  recruiting: RecruitingInfo
  perfectGameProfile: PerfectGameProfile
}

# Game Type
type Game {
  id: ID!
  sport: Sport!
  date: DateTime!
  homeTeam: Team!
  awayTeam: Team!
  homeScore: Int
  awayScore: Int
  status: GameStatus!
  venue: String
  attendance: Int
  weather: Weather
  broadcast: [String!]
  boxScore: JSON
  highlights: [String!]
  odds: GameOdds
}

# Game Status
enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  FINAL
  POSTPONED
  CANCELLED
}

# Record Type
type Record {
  wins: Int!
  losses: Int!
  ties: Int
  winPercentage: Float!
  streak: String
  homeRecord: String
  awayRecord: String
  divisionRecord: String
  conferenceRecord: String
}

# Standing Entry
type StandingEntry {
  rank: Int!
  team: Team!
  record: Record!
  gamesBack: Float
  pointsFor: Int
  pointsAgainst: Int
  differential: Int
  lastTen: String
  clinched: String
}

# Social Media
type SocialMedia {
  twitter: String
  instagram: String
  facebook: String
  youtube: String
  tiktok: String
}

# Draft Info
type DraftInfo {
  year: Int
  round: Int
  pick: Int
  team: String
}

# Team Stats
type TeamStats {
  season: Int!
  offensive: OffensiveStats
  defensive: DefensiveStats
  special: SpecialTeamsStats
}

# Offensive Stats (varies by sport)
type OffensiveStats {
  pointsPerGame: Float
  yardsPerGame: Float
  passingYards: Int
  rushingYards: Int
  totalYards: Int
  # Baseball specific
  battingAverage: Float
  homeRuns: Int
  rbi: Int
  ops: Float
}

# Defensive Stats
type DefensiveStats {
  pointsAllowed: Float
  yardsAllowed: Float
  sacks: Int
  interceptions: Int
  # Baseball specific
  era: Float
  whip: Float
  strikeouts: Int
}

# Special Teams Stats
type SpecialTeamsStats {
  fieldGoalPercentage: Float
  puntAverage: Float
  kickReturnAverage: Float
  puntReturnAverage: Float
}

# Player Stats
type PlayerStats {
  season: Int!
  gamesPlayed: Int!
  # Football
  passingYards: Int
  passingTds: Int
  rushingYards: Int
  rushingTds: Int
  receptions: Int
  receivingYards: Int
  receivingTds: Int
  # Baseball
  battingAverage: Float
  homeRuns: Int
  rbi: Int
  stolenBases: Int
  era: Float
  strikeouts: Int
  wins: Int
  saves: Int
}

# Texas HS Football Specific
type TexasHSFootballTeam {
  id: ID!
  name: String!
  city: String!
  classification: String!
  district: String!
  enrollment: Int
  headCoach: String
  stadium: String
  mascot: String
  colors: [String!]
  dctfRanking: Int
  maxPrepsRanking: Int
  record: Record
  playoffs: PlayoffInfo
  history: [ChampionshipHistory!]
}

# Perfect Game Baseball
type PerfectGameProfile {
  id: ID!
  playerId: ID!
  graduationYear: Int!
  nationalRanking: Int
  stateRanking: Int
  positionRanking: Int
  height: String!
  weight: Int!
  batsThrows: String!
  positions: [String!]
  travelTeam: String
  metrics: PGMetrics
  commitment: Commitment
  tournaments: [Tournament!]
}

type PGMetrics {
  exitVelo: Float
  sixtyTime: Float
  fbVelo: Float
  popTime: Float
  homeToFirst: Float
}

type Commitment {
  school: String!
  date: DateTime!
  division: String!
}

type Tournament {
  id: ID!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  location: String!
  ageGroup: String!
  teams: [String!]
  status: String!
  champions: JSON
}

# Recruiting Info
type RecruitingInfo {
  stars: Int
  nationalRanking: Int
  stateRanking: Int
  positionRanking: Int
  offers: [String!]
  visits: [RecruitingVisit!]
  commitment: String
  rivals: String
  twofourseven: String
}

type RecruitingVisit {
  school: String!
  date: DateTime!
  type: String!
}

# Weather
type Weather {
  temperature: Int
  conditions: String
  wind: String
  humidity: Int
}

# Game Odds
type GameOdds {
  spread: Float
  overUnder: Float
  homeMoneyline: Int
  awayMoneyline: Int
}

# Playoff Info
type PlayoffInfo {
  seed: Int
  round: String
  bracket: String
  nextGame: Game
}

# Championship History
type ChampionshipHistory {
  year: Int!
  title: String!
  level: String!
}

# Root Query Type
type Query {
  # Team queries
  team(sport: Sport!, league: String!, id: ID!): Team
  teams(sport: Sport!, league: String!, conference: String, division: String): [Team!]!

  # Player queries
  player(id: ID!): Player
  players(sport: Sport!, team: ID, position: String, limit: Int = 50): [Player!]!

  # Game queries
  game(id: ID!): Game
  liveGames(sport: Sport): [Game!]!
  schedule(teamId: ID!, season: Int): [Game!]!

  # Standings
  standings(sport: Sport!, league: String!, conference: String, division: String): [StandingEntry!]!

  # Texas HS Football
  texasHSTeams(classification: String, district: String): [TexasHSFootballTeam!]!
  texasHSRankings(classification: String, top: Int = 25): [TexasHSFootballTeam!]!

  # Perfect Game
  perfectGameTournaments(state: String = "TX", ageGroup: String): [Tournament!]!
  perfectGameRankings(gradYear: Int!, state: String = "TX", position: String): [PerfectGameProfile!]!
  perfectGameCommitments(school: String, gradYear: Int): [PerfectGameProfile!]!

  # Search
  search(query: String!, sport: Sport, type: String, limit: Int = 20): [SearchResult!]!

  # Statistics
  leaderboard(sport: Sport!, category: String!, season: Int, limit: Int = 10): [StatLeader!]!
}

# Search Result Union
union SearchResult = Team | Player | Game

# Stat Leader
type StatLeader {
  rank: Int!
  player: Player
  team: Team
  value: Float!
  category: String!
}

# Root Mutation Type
type Mutation {
  # Webhook processing
  processWebhook(source: String!, event: String!, data: JSON!): WebhookResponse!

  # Cache management
  refreshCache(type: String!): CacheResponse!

  # Admin operations
  updateTeamInfo(teamId: ID!, data: JSON!): Team
  updatePlayerStats(playerId: ID!, stats: JSON!): Player
}

# Webhook Response
type WebhookResponse {
  success: Boolean!
  message: String!
  timestamp: DateTime!
}

# Cache Response
type CacheResponse {
  success: Boolean!
  itemsRefreshed: Int!
  timestamp: DateTime!
}

# Root Subscription Type
type Subscription {
  # Live game updates
  gameUpdates(gameId: ID!): Game!

  # Score updates for a specific team
  teamScoreUpdates(teamId: ID!): Game!

  # League-wide score updates
  leagueScoreUpdates(sport: Sport!, league: String!): [Game!]!
}